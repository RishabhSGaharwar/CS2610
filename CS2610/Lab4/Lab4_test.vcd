$date
	Mon Apr 17 16:08:37 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Lab4_tb $end
$var wire 12 ! z [11:0] $end
$var wire 1 " of $end
$var reg 12 # x [11:0] $end
$var reg 12 $ y [11:0] $end
$scope module Main_dut $end
$var wire 12 % x [11:0] $end
$var wire 12 & y [11:0] $end
$var wire 12 ' z [11:0] $end
$var wire 1 ( pm15 $end
$var wire 1 " of $end
$scope module ZeGenerator_dut00 $end
$var wire 4 ) xe [3:0] $end
$var wire 4 * ye [3:0] $end
$var wire 4 + ze [3:0] $end
$var wire 6 , temp3 [5:0] $end
$var wire 6 - temp2 [5:0] $end
$var wire 5 . temp [4:0] $end
$var wire 1 ( pm15 $end
$var wire 1 " of $end
$scope module BLS5_dut1a $end
$var wire 1 / bin $end
$var wire 5 0 x [4:0] $end
$var wire 5 1 y [4:0] $end
$var wire 1 2 t4 $end
$var wire 1 3 t3 $end
$var wire 1 4 t2 $end
$var wire 1 5 t1 $end
$var wire 5 6 diff [4:0] $end
$var wire 1 7 bout $end
$scope module x1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 / b_in $end
$var wire 1 5 b_out $end
$var wire 1 : sum $end
$var wire 1 ; t0 $end
$var wire 1 < t1 $end
$var wire 1 = t2 $end
$var wire 1 > t3 $end
$upscope $end
$scope module x2 $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 5 b_in $end
$var wire 1 4 b_out $end
$var wire 1 A sum $end
$var wire 1 B t0 $end
$var wire 1 C t1 $end
$var wire 1 D t2 $end
$var wire 1 E t3 $end
$upscope $end
$scope module x3 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 4 b_in $end
$var wire 1 3 b_out $end
$var wire 1 H sum $end
$var wire 1 I t0 $end
$var wire 1 J t1 $end
$var wire 1 K t2 $end
$var wire 1 L t3 $end
$upscope $end
$scope module x4 $end
$var wire 1 M a $end
$var wire 1 N b $end
$var wire 1 3 b_in $end
$var wire 1 2 b_out $end
$var wire 1 O sum $end
$var wire 1 P t0 $end
$var wire 1 Q t1 $end
$var wire 1 R t2 $end
$var wire 1 S t3 $end
$upscope $end
$scope module x5 $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 2 b_in $end
$var wire 1 7 b_out $end
$var wire 1 V sum $end
$var wire 1 W t0 $end
$var wire 1 X t1 $end
$var wire 1 Y t2 $end
$var wire 1 Z t3 $end
$upscope $end
$upscope $end
$scope module BLS5_dut1b $end
$var wire 1 [ bin $end
$var wire 5 \ x [4:0] $end
$var wire 5 ] y [4:0] $end
$var wire 1 ^ t4 $end
$var wire 1 _ t3 $end
$var wire 1 ` t2 $end
$var wire 1 a t1 $end
$var wire 5 b diff [4:0] $end
$var wire 1 c bout $end
$scope module x1 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 [ b_in $end
$var wire 1 a b_out $end
$var wire 1 f sum $end
$var wire 1 g t0 $end
$var wire 1 h t1 $end
$var wire 1 i t2 $end
$var wire 1 j t3 $end
$upscope $end
$scope module x2 $end
$var wire 1 k a $end
$var wire 1 l b $end
$var wire 1 a b_in $end
$var wire 1 ` b_out $end
$var wire 1 m sum $end
$var wire 1 n t0 $end
$var wire 1 o t1 $end
$var wire 1 p t2 $end
$var wire 1 q t3 $end
$upscope $end
$scope module x3 $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 ` b_in $end
$var wire 1 _ b_out $end
$var wire 1 t sum $end
$var wire 1 u t0 $end
$var wire 1 v t1 $end
$var wire 1 w t2 $end
$var wire 1 x t3 $end
$upscope $end
$scope module x4 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 _ b_in $end
$var wire 1 ^ b_out $end
$var wire 1 { sum $end
$var wire 1 | t0 $end
$var wire 1 } t1 $end
$var wire 1 ~ t2 $end
$var wire 1 !" t3 $end
$upscope $end
$scope module x5 $end
$var wire 1 "" a $end
$var wire 1 #" b $end
$var wire 1 ^ b_in $end
$var wire 1 c b_out $end
$var wire 1 $" sum $end
$var wire 1 %" t0 $end
$var wire 1 &" t1 $end
$var wire 1 '" t2 $end
$var wire 1 (" t3 $end
$upscope $end
$upscope $end
$scope module CLA4_dut1a $end
$var wire 4 )" a [3:0] $end
$var wire 4 *" b [3:0] $end
$var wire 1 +" cin $end
$var wire 1 ," cout $end
$var wire 4 -" g [3:0] $end
$var wire 4 ." p [3:0] $end
$var wire 4 /" sum [3:0] $end
$var wire 1 0" w1 $end
$var wire 1 1" w2 $end
$var wire 1 2" w3 $end
$var wire 1 3" w4 $end
$var wire 5 4" c [4:0] $end
$upscope $end
$scope module MUX2_1bit_dut00 $end
$var wire 1 " out $end
$var wire 1 5" w1 $end
$var wire 1 6" w2 $end
$var wire 1 7" w3 $end
$var wire 1 8" x $end
$var wire 1 9" y $end
$var wire 1 ( s $end
$upscope $end
$scope module MUX2_4bit_dut00 $end
$var wire 4 :" out [3:0] $end
$var wire 4 ;" w1 [3:0] $end
$var wire 4 <" w2 [3:0] $end
$var wire 1 =" w3 $end
$var wire 4 >" x [3:0] $end
$var wire 4 ?" y [3:0] $end
$var wire 1 ( s $end
$upscope $end
$upscope $end
$scope module ZmGenerator_dut00 $end
$var wire 1 ( pm15 $end
$var wire 7 @" xm [6:0] $end
$var wire 7 A" ym [6:0] $end
$var wire 7 B" zm [6:0] $end
$var wire 16 C" pm [15:0] $end
$var wire 1 D" of $end
$var wire 8 E" Y [7:0] $end
$var wire 8 F" X [7:0] $end
$scope module CSA_Multiplier_dut00 $end
$var wire 1 D" of $end
$var wire 8 G" pp1 [7:0] $end
$var wire 8 H" pp2 [7:0] $end
$var wire 8 I" pp3 [7:0] $end
$var wire 8 J" pp4 [7:0] $end
$var wire 8 K" pp5 [7:0] $end
$var wire 8 L" pp6 [7:0] $end
$var wire 8 M" pp7 [7:0] $end
$var wire 8 N" pp8 [7:0] $end
$var wire 8 O" x [7:0] $end
$var wire 8 P" y [7:0] $end
$var wire 16 Q" sum_vec6 [15:0] $end
$var wire 16 R" sum_vec5 [15:0] $end
$var wire 16 S" sum_vec4 [15:0] $end
$var wire 16 T" sum_vec3 [15:0] $end
$var wire 16 U" sum_vec2 [15:0] $end
$var wire 16 V" sum_vec1 [15:0] $end
$var wire 16 W" product [15:0] $end
$var wire 1 X" cout $end
$var wire 16 Y" carry_vec6 [15:0] $end
$var wire 16 Z" carry_vec5 [15:0] $end
$var wire 16 [" carry_vec4 [15:0] $end
$var wire 16 \" carry_vec3 [15:0] $end
$var wire 16 ]" carry_vec2 [15:0] $end
$var wire 16 ^" carry_vec1 [15:0] $end
$var wire 16 _" PP8 [15:0] $end
$var wire 16 `" PP7 [15:0] $end
$var wire 16 a" PP6 [15:0] $end
$var wire 16 b" PP5 [15:0] $end
$var wire 16 c" PP4 [15:0] $end
$var wire 16 d" PP3 [15:0] $end
$var wire 16 e" PP2 [15:0] $end
$var wire 16 f" PP1 [15:0] $end
$scope module CLA16h_dut $end
$var wire 1 g" cin $end
$var wire 1 X" cout $end
$var wire 16 h" g [15:0] $end
$var wire 16 i" p [15:0] $end
$var wire 1 j" w1 $end
$var wire 1 k" w2 $end
$var wire 1 l" w3 $end
$var wire 1 m" w4 $end
$var wire 16 n" sum [15:0] $end
$var wire 4 o" pi [3:0] $end
$var wire 4 p" gi [3:0] $end
$var wire 5 q" ci [4:0] $end
$var wire 16 r" b [15:0] $end
$var wire 16 s" a [15:0] $end
$scope module CLA4_dut1a $end
$var wire 1 t" cin $end
$var wire 4 u" g [3:0] $end
$var wire 4 v" p [3:0] $end
$var wire 4 w" sum [3:0] $end
$var wire 1 x" w1 $end
$var wire 1 y" w2 $end
$var wire 1 z" w3 $end
$var wire 1 {" w4 $end
$var wire 5 |" c [4:0] $end
$upscope $end
$scope module CLA4_dut1b $end
$var wire 1 }" cin $end
$var wire 4 ~" g [3:0] $end
$var wire 4 !# p [3:0] $end
$var wire 4 "# sum [3:0] $end
$var wire 1 ## w1 $end
$var wire 1 $# w2 $end
$var wire 1 %# w3 $end
$var wire 1 &# w4 $end
$var wire 5 '# c [4:0] $end
$upscope $end
$scope module CLA4_dut1c $end
$var wire 1 (# cin $end
$var wire 4 )# g [3:0] $end
$var wire 4 *# p [3:0] $end
$var wire 4 +# sum [3:0] $end
$var wire 1 ,# w1 $end
$var wire 1 -# w2 $end
$var wire 1 .# w3 $end
$var wire 1 /# w4 $end
$var wire 5 0# c [4:0] $end
$upscope $end
$scope module CLA4_dut1d $end
$var wire 1 1# cin $end
$var wire 4 2# g [3:0] $end
$var wire 4 3# p [3:0] $end
$var wire 4 4# sum [3:0] $end
$var wire 1 5# w1 $end
$var wire 1 6# w2 $end
$var wire 1 7# w3 $end
$var wire 1 8# w4 $end
$var wire 5 9# c [4:0] $end
$upscope $end
$scope module uut1 $end
$var wire 1 :# a $end
$var wire 1 ;# b $end
$var wire 1 <# c $end
$var wire 4 =# g [3:0] $end
$var wire 1 ># gi $end
$var wire 4 ?# p [3:0] $end
$var wire 1 @# pi $end
$upscope $end
$scope module uut2 $end
$var wire 1 A# a $end
$var wire 1 B# b $end
$var wire 1 C# c $end
$var wire 4 D# g [3:0] $end
$var wire 1 E# gi $end
$var wire 4 F# p [3:0] $end
$var wire 1 G# pi $end
$upscope $end
$scope module uut3 $end
$var wire 1 H# a $end
$var wire 1 I# b $end
$var wire 1 J# c $end
$var wire 4 K# g [3:0] $end
$var wire 1 L# gi $end
$var wire 4 M# p [3:0] $end
$var wire 1 N# pi $end
$upscope $end
$scope module uut4 $end
$var wire 1 O# a $end
$var wire 1 P# b $end
$var wire 1 Q# c $end
$var wire 4 R# g [3:0] $end
$var wire 1 S# gi $end
$var wire 4 T# p [3:0] $end
$var wire 1 U# pi $end
$upscope $end
$upscope $end
$scope module ThreeToTwo_dut01 $end
$var wire 16 V# inp1 [15:0] $end
$var wire 16 W# inp2 [15:0] $end
$var wire 16 X# inp3 [15:0] $end
$var wire 16 Y# sum [15:0] $end
$var wire 16 Z# carryt [15:0] $end
$var wire 16 [# carry [15:0] $end
$scope module FullAdder_dut00 $end
$var wire 1 \# a $end
$var wire 1 ]# b $end
$var wire 1 ^# cin $end
$var wire 1 _# cout $end
$var wire 1 `# sum $end
$var wire 1 a# w1 $end
$var wire 1 b# w2 $end
$var wire 1 c# w3 $end
$upscope $end
$scope module FullAdder_dut01 $end
$var wire 1 d# a $end
$var wire 1 e# b $end
$var wire 1 f# cin $end
$var wire 1 g# cout $end
$var wire 1 h# sum $end
$var wire 1 i# w1 $end
$var wire 1 j# w2 $end
$var wire 1 k# w3 $end
$upscope $end
$scope module FullAdder_dut02 $end
$var wire 1 l# a $end
$var wire 1 m# b $end
$var wire 1 n# cin $end
$var wire 1 o# cout $end
$var wire 1 p# sum $end
$var wire 1 q# w1 $end
$var wire 1 r# w2 $end
$var wire 1 s# w3 $end
$upscope $end
$scope module FullAdder_dut03 $end
$var wire 1 t# a $end
$var wire 1 u# b $end
$var wire 1 v# cin $end
$var wire 1 w# cout $end
$var wire 1 x# sum $end
$var wire 1 y# w1 $end
$var wire 1 z# w2 $end
$var wire 1 {# w3 $end
$upscope $end
$scope module FullAdder_dut04 $end
$var wire 1 |# a $end
$var wire 1 }# b $end
$var wire 1 ~# cin $end
$var wire 1 !$ cout $end
$var wire 1 "$ sum $end
$var wire 1 #$ w1 $end
$var wire 1 $$ w2 $end
$var wire 1 %$ w3 $end
$upscope $end
$scope module FullAdder_dut05 $end
$var wire 1 &$ a $end
$var wire 1 '$ b $end
$var wire 1 ($ cin $end
$var wire 1 )$ cout $end
$var wire 1 *$ sum $end
$var wire 1 +$ w1 $end
$var wire 1 ,$ w2 $end
$var wire 1 -$ w3 $end
$upscope $end
$scope module FullAdder_dut06 $end
$var wire 1 .$ a $end
$var wire 1 /$ b $end
$var wire 1 0$ cin $end
$var wire 1 1$ cout $end
$var wire 1 2$ sum $end
$var wire 1 3$ w1 $end
$var wire 1 4$ w2 $end
$var wire 1 5$ w3 $end
$upscope $end
$scope module FullAdder_dut07 $end
$var wire 1 6$ a $end
$var wire 1 7$ b $end
$var wire 1 8$ cin $end
$var wire 1 9$ cout $end
$var wire 1 :$ sum $end
$var wire 1 ;$ w1 $end
$var wire 1 <$ w2 $end
$var wire 1 =$ w3 $end
$upscope $end
$scope module FullAdder_dut08 $end
$var wire 1 >$ a $end
$var wire 1 ?$ b $end
$var wire 1 @$ cin $end
$var wire 1 A$ cout $end
$var wire 1 B$ sum $end
$var wire 1 C$ w1 $end
$var wire 1 D$ w2 $end
$var wire 1 E$ w3 $end
$upscope $end
$scope module FullAdder_dut09 $end
$var wire 1 F$ a $end
$var wire 1 G$ b $end
$var wire 1 H$ cin $end
$var wire 1 I$ cout $end
$var wire 1 J$ sum $end
$var wire 1 K$ w1 $end
$var wire 1 L$ w2 $end
$var wire 1 M$ w3 $end
$upscope $end
$scope module FullAdder_dut10 $end
$var wire 1 N$ a $end
$var wire 1 O$ b $end
$var wire 1 P$ cin $end
$var wire 1 Q$ cout $end
$var wire 1 R$ sum $end
$var wire 1 S$ w1 $end
$var wire 1 T$ w2 $end
$var wire 1 U$ w3 $end
$upscope $end
$scope module FullAdder_dut11 $end
$var wire 1 V$ a $end
$var wire 1 W$ b $end
$var wire 1 X$ cin $end
$var wire 1 Y$ cout $end
$var wire 1 Z$ sum $end
$var wire 1 [$ w1 $end
$var wire 1 \$ w2 $end
$var wire 1 ]$ w3 $end
$upscope $end
$scope module FullAdder_dut12 $end
$var wire 1 ^$ a $end
$var wire 1 _$ b $end
$var wire 1 `$ cin $end
$var wire 1 a$ cout $end
$var wire 1 b$ sum $end
$var wire 1 c$ w1 $end
$var wire 1 d$ w2 $end
$var wire 1 e$ w3 $end
$upscope $end
$scope module FullAdder_dut13 $end
$var wire 1 f$ a $end
$var wire 1 g$ b $end
$var wire 1 h$ cin $end
$var wire 1 i$ cout $end
$var wire 1 j$ sum $end
$var wire 1 k$ w1 $end
$var wire 1 l$ w2 $end
$var wire 1 m$ w3 $end
$upscope $end
$scope module FullAdder_dut14 $end
$var wire 1 n$ a $end
$var wire 1 o$ b $end
$var wire 1 p$ cin $end
$var wire 1 q$ cout $end
$var wire 1 r$ sum $end
$var wire 1 s$ w1 $end
$var wire 1 t$ w2 $end
$var wire 1 u$ w3 $end
$upscope $end
$scope module FullAdder_dut15 $end
$var wire 1 v$ a $end
$var wire 1 w$ b $end
$var wire 1 x$ cin $end
$var wire 1 y$ cout $end
$var wire 1 z$ sum $end
$var wire 1 {$ w1 $end
$var wire 1 |$ w2 $end
$var wire 1 }$ w3 $end
$upscope $end
$upscope $end
$scope module ThreeToTwo_dut02 $end
$var wire 16 ~$ inp1 [15:0] $end
$var wire 16 !% inp2 [15:0] $end
$var wire 16 "% inp3 [15:0] $end
$var wire 16 #% sum [15:0] $end
$var wire 16 $% carryt [15:0] $end
$var wire 16 %% carry [15:0] $end
$scope module FullAdder_dut00 $end
$var wire 1 &% a $end
$var wire 1 '% b $end
$var wire 1 (% cin $end
$var wire 1 )% cout $end
$var wire 1 *% sum $end
$var wire 1 +% w1 $end
$var wire 1 ,% w2 $end
$var wire 1 -% w3 $end
$upscope $end
$scope module FullAdder_dut01 $end
$var wire 1 .% a $end
$var wire 1 /% b $end
$var wire 1 0% cin $end
$var wire 1 1% cout $end
$var wire 1 2% sum $end
$var wire 1 3% w1 $end
$var wire 1 4% w2 $end
$var wire 1 5% w3 $end
$upscope $end
$scope module FullAdder_dut02 $end
$var wire 1 6% a $end
$var wire 1 7% b $end
$var wire 1 8% cin $end
$var wire 1 9% cout $end
$var wire 1 :% sum $end
$var wire 1 ;% w1 $end
$var wire 1 <% w2 $end
$var wire 1 =% w3 $end
$upscope $end
$scope module FullAdder_dut03 $end
$var wire 1 >% a $end
$var wire 1 ?% b $end
$var wire 1 @% cin $end
$var wire 1 A% cout $end
$var wire 1 B% sum $end
$var wire 1 C% w1 $end
$var wire 1 D% w2 $end
$var wire 1 E% w3 $end
$upscope $end
$scope module FullAdder_dut04 $end
$var wire 1 F% a $end
$var wire 1 G% b $end
$var wire 1 H% cin $end
$var wire 1 I% cout $end
$var wire 1 J% sum $end
$var wire 1 K% w1 $end
$var wire 1 L% w2 $end
$var wire 1 M% w3 $end
$upscope $end
$scope module FullAdder_dut05 $end
$var wire 1 N% a $end
$var wire 1 O% b $end
$var wire 1 P% cin $end
$var wire 1 Q% cout $end
$var wire 1 R% sum $end
$var wire 1 S% w1 $end
$var wire 1 T% w2 $end
$var wire 1 U% w3 $end
$upscope $end
$scope module FullAdder_dut06 $end
$var wire 1 V% a $end
$var wire 1 W% b $end
$var wire 1 X% cin $end
$var wire 1 Y% cout $end
$var wire 1 Z% sum $end
$var wire 1 [% w1 $end
$var wire 1 \% w2 $end
$var wire 1 ]% w3 $end
$upscope $end
$scope module FullAdder_dut07 $end
$var wire 1 ^% a $end
$var wire 1 _% b $end
$var wire 1 `% cin $end
$var wire 1 a% cout $end
$var wire 1 b% sum $end
$var wire 1 c% w1 $end
$var wire 1 d% w2 $end
$var wire 1 e% w3 $end
$upscope $end
$scope module FullAdder_dut08 $end
$var wire 1 f% a $end
$var wire 1 g% b $end
$var wire 1 h% cin $end
$var wire 1 i% cout $end
$var wire 1 j% sum $end
$var wire 1 k% w1 $end
$var wire 1 l% w2 $end
$var wire 1 m% w3 $end
$upscope $end
$scope module FullAdder_dut09 $end
$var wire 1 n% a $end
$var wire 1 o% b $end
$var wire 1 p% cin $end
$var wire 1 q% cout $end
$var wire 1 r% sum $end
$var wire 1 s% w1 $end
$var wire 1 t% w2 $end
$var wire 1 u% w3 $end
$upscope $end
$scope module FullAdder_dut10 $end
$var wire 1 v% a $end
$var wire 1 w% b $end
$var wire 1 x% cin $end
$var wire 1 y% cout $end
$var wire 1 z% sum $end
$var wire 1 {% w1 $end
$var wire 1 |% w2 $end
$var wire 1 }% w3 $end
$upscope $end
$scope module FullAdder_dut11 $end
$var wire 1 ~% a $end
$var wire 1 !& b $end
$var wire 1 "& cin $end
$var wire 1 #& cout $end
$var wire 1 $& sum $end
$var wire 1 %& w1 $end
$var wire 1 && w2 $end
$var wire 1 '& w3 $end
$upscope $end
$scope module FullAdder_dut12 $end
$var wire 1 (& a $end
$var wire 1 )& b $end
$var wire 1 *& cin $end
$var wire 1 +& cout $end
$var wire 1 ,& sum $end
$var wire 1 -& w1 $end
$var wire 1 .& w2 $end
$var wire 1 /& w3 $end
$upscope $end
$scope module FullAdder_dut13 $end
$var wire 1 0& a $end
$var wire 1 1& b $end
$var wire 1 2& cin $end
$var wire 1 3& cout $end
$var wire 1 4& sum $end
$var wire 1 5& w1 $end
$var wire 1 6& w2 $end
$var wire 1 7& w3 $end
$upscope $end
$scope module FullAdder_dut14 $end
$var wire 1 8& a $end
$var wire 1 9& b $end
$var wire 1 :& cin $end
$var wire 1 ;& cout $end
$var wire 1 <& sum $end
$var wire 1 =& w1 $end
$var wire 1 >& w2 $end
$var wire 1 ?& w3 $end
$upscope $end
$scope module FullAdder_dut15 $end
$var wire 1 @& a $end
$var wire 1 A& b $end
$var wire 1 B& cin $end
$var wire 1 C& cout $end
$var wire 1 D& sum $end
$var wire 1 E& w1 $end
$var wire 1 F& w2 $end
$var wire 1 G& w3 $end
$upscope $end
$upscope $end
$scope module ThreeToTwo_dut03 $end
$var wire 16 H& inp1 [15:0] $end
$var wire 16 I& inp2 [15:0] $end
$var wire 16 J& inp3 [15:0] $end
$var wire 16 K& sum [15:0] $end
$var wire 16 L& carryt [15:0] $end
$var wire 16 M& carry [15:0] $end
$scope module FullAdder_dut00 $end
$var wire 1 N& a $end
$var wire 1 O& b $end
$var wire 1 P& cin $end
$var wire 1 Q& cout $end
$var wire 1 R& sum $end
$var wire 1 S& w1 $end
$var wire 1 T& w2 $end
$var wire 1 U& w3 $end
$upscope $end
$scope module FullAdder_dut01 $end
$var wire 1 V& a $end
$var wire 1 W& b $end
$var wire 1 X& cin $end
$var wire 1 Y& cout $end
$var wire 1 Z& sum $end
$var wire 1 [& w1 $end
$var wire 1 \& w2 $end
$var wire 1 ]& w3 $end
$upscope $end
$scope module FullAdder_dut02 $end
$var wire 1 ^& a $end
$var wire 1 _& b $end
$var wire 1 `& cin $end
$var wire 1 a& cout $end
$var wire 1 b& sum $end
$var wire 1 c& w1 $end
$var wire 1 d& w2 $end
$var wire 1 e& w3 $end
$upscope $end
$scope module FullAdder_dut03 $end
$var wire 1 f& a $end
$var wire 1 g& b $end
$var wire 1 h& cin $end
$var wire 1 i& cout $end
$var wire 1 j& sum $end
$var wire 1 k& w1 $end
$var wire 1 l& w2 $end
$var wire 1 m& w3 $end
$upscope $end
$scope module FullAdder_dut04 $end
$var wire 1 n& a $end
$var wire 1 o& b $end
$var wire 1 p& cin $end
$var wire 1 q& cout $end
$var wire 1 r& sum $end
$var wire 1 s& w1 $end
$var wire 1 t& w2 $end
$var wire 1 u& w3 $end
$upscope $end
$scope module FullAdder_dut05 $end
$var wire 1 v& a $end
$var wire 1 w& b $end
$var wire 1 x& cin $end
$var wire 1 y& cout $end
$var wire 1 z& sum $end
$var wire 1 {& w1 $end
$var wire 1 |& w2 $end
$var wire 1 }& w3 $end
$upscope $end
$scope module FullAdder_dut06 $end
$var wire 1 ~& a $end
$var wire 1 !' b $end
$var wire 1 "' cin $end
$var wire 1 #' cout $end
$var wire 1 $' sum $end
$var wire 1 %' w1 $end
$var wire 1 &' w2 $end
$var wire 1 '' w3 $end
$upscope $end
$scope module FullAdder_dut07 $end
$var wire 1 (' a $end
$var wire 1 )' b $end
$var wire 1 *' cin $end
$var wire 1 +' cout $end
$var wire 1 ,' sum $end
$var wire 1 -' w1 $end
$var wire 1 .' w2 $end
$var wire 1 /' w3 $end
$upscope $end
$scope module FullAdder_dut08 $end
$var wire 1 0' a $end
$var wire 1 1' b $end
$var wire 1 2' cin $end
$var wire 1 3' cout $end
$var wire 1 4' sum $end
$var wire 1 5' w1 $end
$var wire 1 6' w2 $end
$var wire 1 7' w3 $end
$upscope $end
$scope module FullAdder_dut09 $end
$var wire 1 8' a $end
$var wire 1 9' b $end
$var wire 1 :' cin $end
$var wire 1 ;' cout $end
$var wire 1 <' sum $end
$var wire 1 =' w1 $end
$var wire 1 >' w2 $end
$var wire 1 ?' w3 $end
$upscope $end
$scope module FullAdder_dut10 $end
$var wire 1 @' a $end
$var wire 1 A' b $end
$var wire 1 B' cin $end
$var wire 1 C' cout $end
$var wire 1 D' sum $end
$var wire 1 E' w1 $end
$var wire 1 F' w2 $end
$var wire 1 G' w3 $end
$upscope $end
$scope module FullAdder_dut11 $end
$var wire 1 H' a $end
$var wire 1 I' b $end
$var wire 1 J' cin $end
$var wire 1 K' cout $end
$var wire 1 L' sum $end
$var wire 1 M' w1 $end
$var wire 1 N' w2 $end
$var wire 1 O' w3 $end
$upscope $end
$scope module FullAdder_dut12 $end
$var wire 1 P' a $end
$var wire 1 Q' b $end
$var wire 1 R' cin $end
$var wire 1 S' cout $end
$var wire 1 T' sum $end
$var wire 1 U' w1 $end
$var wire 1 V' w2 $end
$var wire 1 W' w3 $end
$upscope $end
$scope module FullAdder_dut13 $end
$var wire 1 X' a $end
$var wire 1 Y' b $end
$var wire 1 Z' cin $end
$var wire 1 [' cout $end
$var wire 1 \' sum $end
$var wire 1 ]' w1 $end
$var wire 1 ^' w2 $end
$var wire 1 _' w3 $end
$upscope $end
$scope module FullAdder_dut14 $end
$var wire 1 `' a $end
$var wire 1 a' b $end
$var wire 1 b' cin $end
$var wire 1 c' cout $end
$var wire 1 d' sum $end
$var wire 1 e' w1 $end
$var wire 1 f' w2 $end
$var wire 1 g' w3 $end
$upscope $end
$scope module FullAdder_dut15 $end
$var wire 1 h' a $end
$var wire 1 i' b $end
$var wire 1 j' cin $end
$var wire 1 k' cout $end
$var wire 1 l' sum $end
$var wire 1 m' w1 $end
$var wire 1 n' w2 $end
$var wire 1 o' w3 $end
$upscope $end
$upscope $end
$scope module ThreeToTwo_dut04 $end
$var wire 16 p' inp1 [15:0] $end
$var wire 16 q' inp2 [15:0] $end
$var wire 16 r' inp3 [15:0] $end
$var wire 16 s' sum [15:0] $end
$var wire 16 t' carryt [15:0] $end
$var wire 16 u' carry [15:0] $end
$scope module FullAdder_dut00 $end
$var wire 1 v' a $end
$var wire 1 w' b $end
$var wire 1 x' cin $end
$var wire 1 y' cout $end
$var wire 1 z' sum $end
$var wire 1 {' w1 $end
$var wire 1 |' w2 $end
$var wire 1 }' w3 $end
$upscope $end
$scope module FullAdder_dut01 $end
$var wire 1 ~' a $end
$var wire 1 !( b $end
$var wire 1 "( cin $end
$var wire 1 #( cout $end
$var wire 1 $( sum $end
$var wire 1 %( w1 $end
$var wire 1 &( w2 $end
$var wire 1 '( w3 $end
$upscope $end
$scope module FullAdder_dut02 $end
$var wire 1 (( a $end
$var wire 1 )( b $end
$var wire 1 *( cin $end
$var wire 1 +( cout $end
$var wire 1 ,( sum $end
$var wire 1 -( w1 $end
$var wire 1 .( w2 $end
$var wire 1 /( w3 $end
$upscope $end
$scope module FullAdder_dut03 $end
$var wire 1 0( a $end
$var wire 1 1( b $end
$var wire 1 2( cin $end
$var wire 1 3( cout $end
$var wire 1 4( sum $end
$var wire 1 5( w1 $end
$var wire 1 6( w2 $end
$var wire 1 7( w3 $end
$upscope $end
$scope module FullAdder_dut04 $end
$var wire 1 8( a $end
$var wire 1 9( b $end
$var wire 1 :( cin $end
$var wire 1 ;( cout $end
$var wire 1 <( sum $end
$var wire 1 =( w1 $end
$var wire 1 >( w2 $end
$var wire 1 ?( w3 $end
$upscope $end
$scope module FullAdder_dut05 $end
$var wire 1 @( a $end
$var wire 1 A( b $end
$var wire 1 B( cin $end
$var wire 1 C( cout $end
$var wire 1 D( sum $end
$var wire 1 E( w1 $end
$var wire 1 F( w2 $end
$var wire 1 G( w3 $end
$upscope $end
$scope module FullAdder_dut06 $end
$var wire 1 H( a $end
$var wire 1 I( b $end
$var wire 1 J( cin $end
$var wire 1 K( cout $end
$var wire 1 L( sum $end
$var wire 1 M( w1 $end
$var wire 1 N( w2 $end
$var wire 1 O( w3 $end
$upscope $end
$scope module FullAdder_dut07 $end
$var wire 1 P( a $end
$var wire 1 Q( b $end
$var wire 1 R( cin $end
$var wire 1 S( cout $end
$var wire 1 T( sum $end
$var wire 1 U( w1 $end
$var wire 1 V( w2 $end
$var wire 1 W( w3 $end
$upscope $end
$scope module FullAdder_dut08 $end
$var wire 1 X( a $end
$var wire 1 Y( b $end
$var wire 1 Z( cin $end
$var wire 1 [( cout $end
$var wire 1 \( sum $end
$var wire 1 ]( w1 $end
$var wire 1 ^( w2 $end
$var wire 1 _( w3 $end
$upscope $end
$scope module FullAdder_dut09 $end
$var wire 1 `( a $end
$var wire 1 a( b $end
$var wire 1 b( cin $end
$var wire 1 c( cout $end
$var wire 1 d( sum $end
$var wire 1 e( w1 $end
$var wire 1 f( w2 $end
$var wire 1 g( w3 $end
$upscope $end
$scope module FullAdder_dut10 $end
$var wire 1 h( a $end
$var wire 1 i( b $end
$var wire 1 j( cin $end
$var wire 1 k( cout $end
$var wire 1 l( sum $end
$var wire 1 m( w1 $end
$var wire 1 n( w2 $end
$var wire 1 o( w3 $end
$upscope $end
$scope module FullAdder_dut11 $end
$var wire 1 p( a $end
$var wire 1 q( b $end
$var wire 1 r( cin $end
$var wire 1 s( cout $end
$var wire 1 t( sum $end
$var wire 1 u( w1 $end
$var wire 1 v( w2 $end
$var wire 1 w( w3 $end
$upscope $end
$scope module FullAdder_dut12 $end
$var wire 1 x( a $end
$var wire 1 y( b $end
$var wire 1 z( cin $end
$var wire 1 {( cout $end
$var wire 1 |( sum $end
$var wire 1 }( w1 $end
$var wire 1 ~( w2 $end
$var wire 1 !) w3 $end
$upscope $end
$scope module FullAdder_dut13 $end
$var wire 1 ") a $end
$var wire 1 #) b $end
$var wire 1 $) cin $end
$var wire 1 %) cout $end
$var wire 1 &) sum $end
$var wire 1 ') w1 $end
$var wire 1 () w2 $end
$var wire 1 )) w3 $end
$upscope $end
$scope module FullAdder_dut14 $end
$var wire 1 *) a $end
$var wire 1 +) b $end
$var wire 1 ,) cin $end
$var wire 1 -) cout $end
$var wire 1 .) sum $end
$var wire 1 /) w1 $end
$var wire 1 0) w2 $end
$var wire 1 1) w3 $end
$upscope $end
$scope module FullAdder_dut15 $end
$var wire 1 2) a $end
$var wire 1 3) b $end
$var wire 1 4) cin $end
$var wire 1 5) cout $end
$var wire 1 6) sum $end
$var wire 1 7) w1 $end
$var wire 1 8) w2 $end
$var wire 1 9) w3 $end
$upscope $end
$upscope $end
$scope module ThreeToTwo_dut05 $end
$var wire 16 :) inp1 [15:0] $end
$var wire 16 ;) inp2 [15:0] $end
$var wire 16 <) inp3 [15:0] $end
$var wire 16 =) sum [15:0] $end
$var wire 16 >) carryt [15:0] $end
$var wire 16 ?) carry [15:0] $end
$scope module FullAdder_dut00 $end
$var wire 1 @) a $end
$var wire 1 A) b $end
$var wire 1 B) cin $end
$var wire 1 C) cout $end
$var wire 1 D) sum $end
$var wire 1 E) w1 $end
$var wire 1 F) w2 $end
$var wire 1 G) w3 $end
$upscope $end
$scope module FullAdder_dut01 $end
$var wire 1 H) a $end
$var wire 1 I) b $end
$var wire 1 J) cin $end
$var wire 1 K) cout $end
$var wire 1 L) sum $end
$var wire 1 M) w1 $end
$var wire 1 N) w2 $end
$var wire 1 O) w3 $end
$upscope $end
$scope module FullAdder_dut02 $end
$var wire 1 P) a $end
$var wire 1 Q) b $end
$var wire 1 R) cin $end
$var wire 1 S) cout $end
$var wire 1 T) sum $end
$var wire 1 U) w1 $end
$var wire 1 V) w2 $end
$var wire 1 W) w3 $end
$upscope $end
$scope module FullAdder_dut03 $end
$var wire 1 X) a $end
$var wire 1 Y) b $end
$var wire 1 Z) cin $end
$var wire 1 [) cout $end
$var wire 1 \) sum $end
$var wire 1 ]) w1 $end
$var wire 1 ^) w2 $end
$var wire 1 _) w3 $end
$upscope $end
$scope module FullAdder_dut04 $end
$var wire 1 `) a $end
$var wire 1 a) b $end
$var wire 1 b) cin $end
$var wire 1 c) cout $end
$var wire 1 d) sum $end
$var wire 1 e) w1 $end
$var wire 1 f) w2 $end
$var wire 1 g) w3 $end
$upscope $end
$scope module FullAdder_dut05 $end
$var wire 1 h) a $end
$var wire 1 i) b $end
$var wire 1 j) cin $end
$var wire 1 k) cout $end
$var wire 1 l) sum $end
$var wire 1 m) w1 $end
$var wire 1 n) w2 $end
$var wire 1 o) w3 $end
$upscope $end
$scope module FullAdder_dut06 $end
$var wire 1 p) a $end
$var wire 1 q) b $end
$var wire 1 r) cin $end
$var wire 1 s) cout $end
$var wire 1 t) sum $end
$var wire 1 u) w1 $end
$var wire 1 v) w2 $end
$var wire 1 w) w3 $end
$upscope $end
$scope module FullAdder_dut07 $end
$var wire 1 x) a $end
$var wire 1 y) b $end
$var wire 1 z) cin $end
$var wire 1 {) cout $end
$var wire 1 |) sum $end
$var wire 1 }) w1 $end
$var wire 1 ~) w2 $end
$var wire 1 !* w3 $end
$upscope $end
$scope module FullAdder_dut08 $end
$var wire 1 "* a $end
$var wire 1 #* b $end
$var wire 1 $* cin $end
$var wire 1 %* cout $end
$var wire 1 &* sum $end
$var wire 1 '* w1 $end
$var wire 1 (* w2 $end
$var wire 1 )* w3 $end
$upscope $end
$scope module FullAdder_dut09 $end
$var wire 1 ** a $end
$var wire 1 +* b $end
$var wire 1 ,* cin $end
$var wire 1 -* cout $end
$var wire 1 .* sum $end
$var wire 1 /* w1 $end
$var wire 1 0* w2 $end
$var wire 1 1* w3 $end
$upscope $end
$scope module FullAdder_dut10 $end
$var wire 1 2* a $end
$var wire 1 3* b $end
$var wire 1 4* cin $end
$var wire 1 5* cout $end
$var wire 1 6* sum $end
$var wire 1 7* w1 $end
$var wire 1 8* w2 $end
$var wire 1 9* w3 $end
$upscope $end
$scope module FullAdder_dut11 $end
$var wire 1 :* a $end
$var wire 1 ;* b $end
$var wire 1 <* cin $end
$var wire 1 =* cout $end
$var wire 1 >* sum $end
$var wire 1 ?* w1 $end
$var wire 1 @* w2 $end
$var wire 1 A* w3 $end
$upscope $end
$scope module FullAdder_dut12 $end
$var wire 1 B* a $end
$var wire 1 C* b $end
$var wire 1 D* cin $end
$var wire 1 E* cout $end
$var wire 1 F* sum $end
$var wire 1 G* w1 $end
$var wire 1 H* w2 $end
$var wire 1 I* w3 $end
$upscope $end
$scope module FullAdder_dut13 $end
$var wire 1 J* a $end
$var wire 1 K* b $end
$var wire 1 L* cin $end
$var wire 1 M* cout $end
$var wire 1 N* sum $end
$var wire 1 O* w1 $end
$var wire 1 P* w2 $end
$var wire 1 Q* w3 $end
$upscope $end
$scope module FullAdder_dut14 $end
$var wire 1 R* a $end
$var wire 1 S* b $end
$var wire 1 T* cin $end
$var wire 1 U* cout $end
$var wire 1 V* sum $end
$var wire 1 W* w1 $end
$var wire 1 X* w2 $end
$var wire 1 Y* w3 $end
$upscope $end
$scope module FullAdder_dut15 $end
$var wire 1 Z* a $end
$var wire 1 [* b $end
$var wire 1 \* cin $end
$var wire 1 ]* cout $end
$var wire 1 ^* sum $end
$var wire 1 _* w1 $end
$var wire 1 `* w2 $end
$var wire 1 a* w3 $end
$upscope $end
$upscope $end
$scope module ThreeToTwo_dut06 $end
$var wire 16 b* inp1 [15:0] $end
$var wire 16 c* inp2 [15:0] $end
$var wire 16 d* inp3 [15:0] $end
$var wire 16 e* sum [15:0] $end
$var wire 16 f* carryt [15:0] $end
$var wire 16 g* carry [15:0] $end
$scope module FullAdder_dut00 $end
$var wire 1 h* a $end
$var wire 1 i* b $end
$var wire 1 j* cin $end
$var wire 1 k* cout $end
$var wire 1 l* sum $end
$var wire 1 m* w1 $end
$var wire 1 n* w2 $end
$var wire 1 o* w3 $end
$upscope $end
$scope module FullAdder_dut01 $end
$var wire 1 p* a $end
$var wire 1 q* b $end
$var wire 1 r* cin $end
$var wire 1 s* cout $end
$var wire 1 t* sum $end
$var wire 1 u* w1 $end
$var wire 1 v* w2 $end
$var wire 1 w* w3 $end
$upscope $end
$scope module FullAdder_dut02 $end
$var wire 1 x* a $end
$var wire 1 y* b $end
$var wire 1 z* cin $end
$var wire 1 {* cout $end
$var wire 1 |* sum $end
$var wire 1 }* w1 $end
$var wire 1 ~* w2 $end
$var wire 1 !+ w3 $end
$upscope $end
$scope module FullAdder_dut03 $end
$var wire 1 "+ a $end
$var wire 1 #+ b $end
$var wire 1 $+ cin $end
$var wire 1 %+ cout $end
$var wire 1 &+ sum $end
$var wire 1 '+ w1 $end
$var wire 1 (+ w2 $end
$var wire 1 )+ w3 $end
$upscope $end
$scope module FullAdder_dut04 $end
$var wire 1 *+ a $end
$var wire 1 ++ b $end
$var wire 1 ,+ cin $end
$var wire 1 -+ cout $end
$var wire 1 .+ sum $end
$var wire 1 /+ w1 $end
$var wire 1 0+ w2 $end
$var wire 1 1+ w3 $end
$upscope $end
$scope module FullAdder_dut05 $end
$var wire 1 2+ a $end
$var wire 1 3+ b $end
$var wire 1 4+ cin $end
$var wire 1 5+ cout $end
$var wire 1 6+ sum $end
$var wire 1 7+ w1 $end
$var wire 1 8+ w2 $end
$var wire 1 9+ w3 $end
$upscope $end
$scope module FullAdder_dut06 $end
$var wire 1 :+ a $end
$var wire 1 ;+ b $end
$var wire 1 <+ cin $end
$var wire 1 =+ cout $end
$var wire 1 >+ sum $end
$var wire 1 ?+ w1 $end
$var wire 1 @+ w2 $end
$var wire 1 A+ w3 $end
$upscope $end
$scope module FullAdder_dut07 $end
$var wire 1 B+ a $end
$var wire 1 C+ b $end
$var wire 1 D+ cin $end
$var wire 1 E+ cout $end
$var wire 1 F+ sum $end
$var wire 1 G+ w1 $end
$var wire 1 H+ w2 $end
$var wire 1 I+ w3 $end
$upscope $end
$scope module FullAdder_dut08 $end
$var wire 1 J+ a $end
$var wire 1 K+ b $end
$var wire 1 L+ cin $end
$var wire 1 M+ cout $end
$var wire 1 N+ sum $end
$var wire 1 O+ w1 $end
$var wire 1 P+ w2 $end
$var wire 1 Q+ w3 $end
$upscope $end
$scope module FullAdder_dut09 $end
$var wire 1 R+ a $end
$var wire 1 S+ b $end
$var wire 1 T+ cin $end
$var wire 1 U+ cout $end
$var wire 1 V+ sum $end
$var wire 1 W+ w1 $end
$var wire 1 X+ w2 $end
$var wire 1 Y+ w3 $end
$upscope $end
$scope module FullAdder_dut10 $end
$var wire 1 Z+ a $end
$var wire 1 [+ b $end
$var wire 1 \+ cin $end
$var wire 1 ]+ cout $end
$var wire 1 ^+ sum $end
$var wire 1 _+ w1 $end
$var wire 1 `+ w2 $end
$var wire 1 a+ w3 $end
$upscope $end
$scope module FullAdder_dut11 $end
$var wire 1 b+ a $end
$var wire 1 c+ b $end
$var wire 1 d+ cin $end
$var wire 1 e+ cout $end
$var wire 1 f+ sum $end
$var wire 1 g+ w1 $end
$var wire 1 h+ w2 $end
$var wire 1 i+ w3 $end
$upscope $end
$scope module FullAdder_dut12 $end
$var wire 1 j+ a $end
$var wire 1 k+ b $end
$var wire 1 l+ cin $end
$var wire 1 m+ cout $end
$var wire 1 n+ sum $end
$var wire 1 o+ w1 $end
$var wire 1 p+ w2 $end
$var wire 1 q+ w3 $end
$upscope $end
$scope module FullAdder_dut13 $end
$var wire 1 r+ a $end
$var wire 1 s+ b $end
$var wire 1 t+ cin $end
$var wire 1 u+ cout $end
$var wire 1 v+ sum $end
$var wire 1 w+ w1 $end
$var wire 1 x+ w2 $end
$var wire 1 y+ w3 $end
$upscope $end
$scope module FullAdder_dut14 $end
$var wire 1 z+ a $end
$var wire 1 {+ b $end
$var wire 1 |+ cin $end
$var wire 1 }+ cout $end
$var wire 1 ~+ sum $end
$var wire 1 !, w1 $end
$var wire 1 ", w2 $end
$var wire 1 #, w3 $end
$upscope $end
$scope module FullAdder_dut15 $end
$var wire 1 $, a $end
$var wire 1 %, b $end
$var wire 1 &, cin $end
$var wire 1 ', cout $end
$var wire 1 (, sum $end
$var wire 1 ), w1 $end
$var wire 1 *, w2 $end
$var wire 1 +, w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope module MUX2_7bit_dut00 $end
$var wire 7 ,, out [6:0] $end
$var wire 1 -, s $end
$var wire 7 ., w1 [6:0] $end
$var wire 7 /, w2 [6:0] $end
$var wire 1 0, w3 $end
$var wire 7 1, x [6:0] $end
$var wire 7 2, y [6:0] $end
$upscope $end
$upscope $end
$scope module ZsGenerator_dut00 $end
$var wire 1 3, xs $end
$var wire 1 4, ys $end
$var wire 1 5, zs $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
05,
04,
03,
b101000 2,
b1010000 1,
00,
b0 /,
b101000 .,
1-,
b101000 ,,
0+,
0*,
0),
0(,
0',
0&,
0%,
0$,
1#,
0",
0!,
0~+
1}+
1|+
1{+
0z+
0y+
0x+
0w+
1v+
0u+
0t+
1s+
0r+
0q+
0p+
0o+
0n+
0m+
0l+
0k+
0j+
0i+
0h+
0g+
1f+
0e+
1d+
0c+
0b+
0a+
0`+
0_+
0^+
0]+
0\+
0[+
0Z+
0Y+
0X+
0W+
0V+
0U+
0T+
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
0K+
0J+
0I+
0H+
0G+
0F+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
0=+
0<+
0;+
0:+
09+
08+
07+
06+
05+
04+
03+
02+
01+
00+
0/+
0.+
0-+
0,+
0++
0*+
0)+
0(+
0'+
0&+
0%+
0$+
0#+
0"+
0!+
0~*
0}*
0|*
0{*
0z*
0y*
0x*
0w*
0v*
0u*
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
0l*
0k*
0j*
0i*
0h*
b1000000000000000 g*
b100000000000000 f*
b10100000000000 e*
b100100000000000 d*
b110000000000000 c*
b0 b*
0a*
0`*
0_*
0^*
0]*
0\*
0[*
0Z*
0Y*
0X*
0W*
1V*
0U*
1T*
0S*
0R*
0Q*
0P*
0O*
1N*
0M*
1L*
0K*
0J*
0I*
0H*
0G*
0F*
0E*
0D*
0C*
0B*
0A*
0@*
0?*
0>*
0=*
0<*
0;*
0:*
09*
08*
07*
06*
05*
04*
03*
02*
01*
00*
0/*
0.*
0-*
0,*
0+*
0**
0)*
0(*
0'*
0&*
0%*
0$*
0#*
0"*
0!*
0~)
0})
0|)
0{)
0z)
0y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
0^)
0])
0\)
0[)
0Z)
0Y)
0X)
0W)
0V)
0U)
0T)
0S)
0R)
0Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
0D)
0C)
0B)
0A)
0@)
b0 ?)
b0 >)
b110000000000000 =)
b110000000000000 <)
b0 ;)
b0 :)
09)
08)
07)
06)
05)
04)
03)
02)
01)
00)
0/)
1.)
0-)
1,)
0+)
0*)
0))
1()
0')
0&)
1%)
1$)
0#)
1")
0!)
1~(
0}(
0|(
1{(
1z(
0y(
1x(
0w(
0v(
0u(
1t(
0s(
0r(
0q(
1p(
0o(
0n(
0m(
0l(
0k(
0j(
0i(
0h(
0g(
0f(
0e(
0d(
0c(
0b(
0a(
0`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
b110000000000000 u'
b11000000000000 t'
b100100000000000 s'
b111000000000000 r'
b0 q'
b11100000000000 p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
0-'
0,'
0+'
0*'
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
b0 M&
b0 L&
b0 K&
b0 J&
b0 I&
b0 H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
04&
03&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
b0 %%
b0 $%
b0 #%
b0 "%
b0 !%
b0 ~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
0U#
b1010 T#
0S#
b0 R#
0Q#
0P#
0O#
0N#
b1000 M#
0L#
b0 K#
0J#
0I#
0H#
0G#
b0 F#
0E#
b0 D#
0C#
0B#
0A#
0@#
b0 ?#
0>#
b0 =#
0<#
0;#
0:#
bz0000 9#
08#
07#
06#
05#
b1010 4#
b1010 3#
b0 2#
01#
bz0000 0#
0/#
0.#
0-#
0,#
b1000 +#
b1000 *#
b0 )#
0(#
bz0000 '#
0&#
0%#
0$#
0##
b0 "#
b0 !#
b0 ~"
0}"
bz0000 |"
0{"
0z"
0y"
0x"
b0 w"
b0 v"
b0 u"
0t"
b10100000000000 s"
b1000000000000000 r"
b0 q"
b0 p"
b0 o"
b1010100000000000 n"
0m"
0l"
0k"
0j"
b1010100000000000 i"
b0 h"
0g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b11100000000000 `"
b111000000000000 _"
b0 ^"
b0 ]"
b0 \"
b110000000000000 ["
b0 Z"
b1000000000000000 Y"
0X"
b1010100000000000 W"
b0 V"
b0 U"
b0 T"
b100100000000000 S"
b110000000000000 R"
b10100000000000 Q"
b11000000 P"
b11100000 O"
b11100000 N"
b11100000 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b11100000 F"
b11000000 E"
1D"
b1010100000000000 C"
b101000 B"
b1000000 A"
b1100000 @"
b111 ?"
b110 >"
0="
b0 <"
b111 ;"
b111 :"
09"
08"
07"
06"
05"
b1100 4"
03"
02"
01"
00"
b1101 /"
b1 ."
b110 -"
0,"
0+"
b111 *"
b110 )"
0("
0'"
0&"
1%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
1y
1x
0w
0v
0u
1t
1s
1r
0q
0p
1o
1n
1m
1l
0k
0j
0i
0h
0g
1f
0e
1d
0c
b111 b
0a
1`
1_
0^
b110 ]
b1101 \
0[
0Z
0Y
0X
1W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
1M
1L
0K
0J
0I
1H
1G
1F
0E
0D
1C
1B
1A
1@
0?
0>
0=
0<
0;
0:
19
18
07
b110 6
05
14
13
02
b111 1
b1101 0
0/
b1101 .
b110 -
b111 ,
b111 +
b111 *
b110 )
1(
b1110101000 '
b1111000000 &
b1101100000 %
b1111000000 $
b1101100000 #
0"
b1110101000 !
$end
#20
b101110101000 !
b101110101000 '
15,
14,
b101111000000 $
b101111000000 &
#40
b10000 B"
b10000 ,,
0v+
b10000 .,
0s+
b10000 2,
b100000 1,
b100000000000000 R"
b100000000000000 =)
b100000000000000 c*
0N*
b0 +#
b1001000000000000 C"
b1001000000000000 W"
b1001000000000000 n"
b1001 4#
0L*
b0 M#
b1001 T#
b0 *#
b1001 3#
b100000000000000 ["
b100000000000000 u'
b100000000000000 <)
b1001000000000000 i"
0f+
b1000000000000 Q"
b1000000000000 s"
b1000000000000 e*
1n+
0d+
b10000000000000 t'
0{(
1l+
0t(
0~(
b101000000000000 S"
b101000000000000 s'
b101000000000000 d*
1|(
0p(
0z(
b11000000000000 `"
b11000000000000 p'
b110000000000000 _"
b110000000000000 r'
b11000000 M"
b11000000 N"
b1110010000 !
b1110010000 '
05,
b11000000 F"
b11000000 O"
04,
b1000000 @"
b1111000000 $
b1111000000 &
b1101000000 #
b1101000000 %
#60
b101110010000 !
b101110010000 '
15,
14,
b101111000000 $
b101111000000 &
#80
1"
15"
18"
19"
0A
1D
1E
b110 +
b110 :"
1V
0W
1$"
0%"
15
b110 ;"
1T
1""
b101 >"
1<
b110 ?"
1,"
b10101 -
b10101 6
1:
1;
b10110 ,
b10110 b
0f
1g
08
0d
b11100 4"
b11100 .
b11100 0
b11100 \
b1100 /"
b1100010000 !
b1100010000 '
05,
b0 ."
b1110 -"
04,
b1110 *
b1110 *"
b1110 )
b1110 )"
b11101000000 $
b11101000000 &
b11101000000 #
b11101000000 %
#100
17
1c
1Y
0x
b11000010000 !
b11000010000 '
b1100 +
b1100 :"
1'"
1"
12
0`
b1100 ;"
1^
15"
0C
0D
1J
1K
b1011 >"
1R
0o
1v
0w
b1100 ?"
1~
18"
19"
1A
0B
0H
1I
1O
1P
0m
0n
1t
1u
1{
1|
b111011 -
b11011 6
1V
1W
b111100 ,
b11100 b
1$"
1%"
1?
0F
0M
1k
0r
0y
0T
0""
b10 /"
b10 .
b10 0
b10 \
0,"
b10 4"
b1 -"
b1 *
b1 *"
b1 )
b1 )"
b11000000 $
b11000000 &
b11000000 #
b11000000 %
#320
